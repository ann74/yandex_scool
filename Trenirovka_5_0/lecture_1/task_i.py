# I. Расписание
# Как же Илье надоело учиться! Сначала школа, потом университет... Вот, наконец, наступил тот долгожданный день,
# когда Илье утром не надо ехать на учебу. Но, к несчастью для Ильи, оказалось, что после окончания университета
# начинается самое трудное — надо устраиваться на работу.
# Во всемирно известной фирме «Goondex», в которую устроился Илья, принято очень много работать, в частности,
# для сотрудников установлена шестидневная рабочая неделя. Но, в качестве бонуса, «Goondex» каждый год предлагает
# своим сотрудникам выбрать любой день недели в качестве выходного. В свою очередь, оставшиеся шесть дней недели
# будут рабочими.
# Илья сообразил, что с учётом государственных праздников (которые всегда являются выходными) с помощью правильного
# выбора выходного дня недели можно варьировать количество рабочих дней в году. Теперь он хочет знать, какой день
# недели ему следует выбрать в качестве выходного, чтобы отдыхать как можно больше дней в году, или, наоборот,
# демонстрировать чудеса трудолюбия, работая по максимуму.
# Формат ввода
# В первой строке входных данных находится одно целое число N (0 ≤ N ≤ 366) — количество государственных праздников.
# Во второй строке содержится одно целое число year (1800 ≤ year ≤ 2100) — год, в который необходимо помочь Илье.
# В каждой из последующих N строк расположено по паре чисел day month (day — целое число, month — слово, между
# day и month ровно один пробел), обозначающих, что день day месяца month является государственным праздником.
# В последней строке расположено слово  — день недели первого января в год year.
# Гарантируется, что все даты указаны корректно (в том числе указанный день недели первого января действительно
# является днём недели первого января соответствующего года year) и все дни государственных праздников различны.
# Формат вывода
# Выведите через пробел два дня недели — лучший и худший варианты дней недели для выходного (то есть дни недели,
# для которых достигается соответственно максимальное и минимальное количество выходных дней в году).
# Если возможных вариантов ответа несколько, выведите любой из них.
# Пример 1
# Ввод	         Вывод
# 2                Monday Thursday
# 2015
# 1 January
# 8 January
# Thursday


from datetime import date


def is_leap_year(year: int) -> bool:
    return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)


months = {'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6, 'July': 7,
          'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12}
week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
days_of_week_days = {0: 52, 1: 52, 2: 52, 3: 52, 4: 52, 5: 52, 6: 52}

holidays = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}

n = int(input())
year = int(input())
for _ in range(n):
    row = input().strip().split()
    day = int(row[0])
    month = row[1]
    week_day = date(year, months[month], day).weekday()
    holidays[week_day] += 1
first_day = input().strip()

first_day_number = week_days.index(first_day)
days_of_week_days[first_day_number] += 1
if is_leap_year(year):
    days_of_week_days[(first_day_number + 1) % 7] += 1
best_day = (0, days_of_week_days[0] - holidays[0])
worst_day = (0, days_of_week_days[0] - holidays[0])
for i in range(7):
    weekends = days_of_week_days[i] - holidays[i]
    if weekends > best_day[1]:
        best_day = (i, weekends)
    if weekends < worst_day[1]:
        worst_day = (i, weekends)

print(week_days[best_day[0]], week_days[worst_day[0]])