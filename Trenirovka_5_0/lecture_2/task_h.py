# H. Наилучший запрет
# Константин и Михаил играют в настольную игру «Ярость Эльфов». В игре есть n рас и m классов персонажей.
# Каждый персонаж характеризуется своими расой и классом. Для каждой расы и каждого класса существует ровно
# один персонаж такой расы и такого класса. Сила персонажа i-й расы и j-го класса равна ai j, и обоим игрокам
# это прекрасно известно.
# Сейчас Константин будет выбирать себе персонажа. Перед этим Михаил может запретить одну расу и один класс,
# чтобы Константин не мог выбирать персонажей, у которых такая раса или такой класс. Конечно же, Михаил старается,
# чтобы Константину достался как можно более слабый персонаж, а Константин, напротив, выбирает персонажа посильнее.
# Какие расу и класс следует запретить Михаилу?
# Формат ввода
# Первая строка содержит два целых числа n и m (2 ≤ n,m ≤ 1000) через пробел — количество рас и классов в игре
# «Ярость Эльфов», соответственно.
# В следующих n строках содержится по m целых чисел через пробел. j-е число i-й из этих строк — это ai j (1 ≤ ai j ≤ 109).
# Формат вывода
# В единственной строке выведите два целых числа через пробел — номер расы и номер класса, которые следует запретить
# Михаилу. Расы и классы нумеруются с единицы. Если есть несколько возможных ответов, выведите любой из них.
# Пример 1
# Ввод	Вывод
# 2 2     2 2
# 1 2
# 3 4


import sys


def fast_input():
    return sys.stdin.readline().rstrip("\r\n")


n, m = map(int, fast_input().split())
powers = []

for i in range(n):
    row = list(map(int, fast_input().split()))
    for j in range(m):
        powers.append((row[j], i + 1, j + 1))

powers.sort(key=lambda x: x[0])
max1 = powers[-1]
max2 = powers[-2]

if max1[1] != max2[1] and max1[2] != max2[2]:
    max3 = powers[-3]
    if max3[1] == max1[1] or max3[2] == max2[2]:
        print(max1[1], max2[2])
    elif max3[2] == max1[2] or max3[1] == max2[1]:
        print(max2[1], max1[2])
    else:
        print(max1[1], max2[2])
elif max1[1] == max2[1]:
    for k in range(n * m - 3, -1, -1):
        if powers[k][2] == max1[2] or (powers[k][1] != max1[1] and powers[k][2] != max1[2]):
            print(max1[1], powers[k][2])
            break
else:
    for k in range(n * m - 3, -1, -1):
        if powers[k][1] == max1[1] or (powers[k][1] != max1[1] and powers[k][2] != max1[2]):
            print(powers[k][1], max1[2])
            break
