# E. Имена
# На далекой планете Тау Кита есть непонятные нам обычаи. Например, таукитяне очень необычно для землян выбирают
# имена своим детям. Родители так выбирают имя ребенку, чтобы оно могло быть получено как удалением некоторого
# набора букв из имени отца, так и удалением некоторого набора букв из имени матери. Например, если отца зовут
# «abacaba», а мать — «bbccaa», то их ребенок может носить имена «a», «bba», «bcaa», но не может носить имена «aaa»,
# «ab» или «bbc». Возможно, что имя ребенка совпадает с именем отца и/или матери, если оно может быть получено
# из имени другого родителя удалением нескольких (возможно, ни одной) букв.
# Пусть отец по имени X и мать по имени Y выбирают имя своему новорожденному ребенку. Так как в таукитянских школах
# учеников часто вызывают к доске в лексикографическом порядке имен учеников, то есть в порядке следования имен
# в словаре, то они хотят выбрать своему ребенку такое имя, чтобы оно лексикографически следовало как можно позже.
# Формально, строка S лексикографически больше строки T, если выполняется одно из двух условий: строка T получается
# из S удалением одной или более букв с конца строки S; первые (i - 1) символов строк T и S не различаются, а буква
# в i-й позиции строки T следует в алфавите раньше буквы в i-й позиции строки S. Требуется написать программу,
# которая по именам отца и матери находит лексикографически наибольшее имя для их ребенка.
# Формат ввода
# Первая строка входного файла содержит X — имя отца. Вторая строка входного файла содержит Y — имя матери.
# Каждое имя состоит из строчных букв латинского алфавита, включает хотя бы одну букву и имеет длину не более
# 105 букв.
# Формат вывода
# Выходной файл должен содержать искомое лексикографически наибольшее из возможных имен ребенка. В случае,
# если подходящего имени для ребенка не существует, выходной файл должен быть пустым.
# Пример 1
# Ввод	  Вывод
# abcabca   ca
# abcda


from collections import Counter

mather = input().strip()
father = input().strip()
first = Counter(mather)
second = Counter(father)
bouth = first & second
ans = []
while bouth:
    max_sym = max(bouth)
    count = min(first[max_sym], second[max_sym])
    ans.append(max_sym * count)
    mather = mather.replace(max_sym, '#', count)
    father = father.replace(max_sym, '#', count)
    mather = mather[mather.rfind('#') + 1:]
    father = father[father.rfind('#') + 1:]
    first = Counter(mather)
    second = Counter(father)
    bouth = first & second
print(''.join(ans))

